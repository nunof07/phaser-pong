(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const BootState_1 = require("./states/BootState");
const PreloaderState_1 = require("./states/PreloaderState");
const GameState_1 = require("./states/GameState");
class PongGame {
    constructor() {
        this._game = new Phaser.Game({
            width: 1024,
            height: 576,
            renderer: Phaser.AUTO,
            parent: 'game-container'
        });
    }
    start() {
        this._game.state.add('boot', new BootState_1.default());
        this._game.state.add('preloader', new PreloaderState_1.default());
        this._game.state.add('game', new GameState_1.default());
        this._game.state.start('boot');
    }
}
exports.default = PongGame;
},{"./states/BootState":10,"./states/GameState":11,"./states/PreloaderState":12}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Randomizer {
    boolean() {
        return Math.random() >= 0.5;
    }
}
exports.default = Randomizer;
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Randomizer_1 = require("../Randomizer");
class Ball {
    constructor(state, velocity = 400, goLeft = true, randomizer = new Randomizer_1.default()) {
        this._state = state;
        this._velocity = velocity;
        this._isLaunched = false;
        this._randomizer = randomizer;
        this._goLeft = goLeft;
    }
    create() {
        this._sprite = this._state.game.add.sprite(this._state.game.world.centerX, this._state.game.world.centerY, 'ball');
        this._sprite.anchor.setTo(0.5, 0.5);
        this._state.game.physics.arcade.enable(this._sprite);
        this._sprite.body.collideWorldBounds = true;
        this._sprite.body.bounce.setTo(1, 1);
    }
    reset(goLeft) {
        this._sprite.x = this._state.game.world.centerX;
        this._sprite.y = this._state.game.world.centerY;
        this._sprite.body.velocity.setTo(0, 0);
        this._isLaunched = false;
        this._goLeft = goLeft;
    }
    launch() {
        let xMultiplier = this._goLeft ? -1 : 1;
        let yMultiplier = this._randomizer.boolean() ? -1 : 1;
        this._sprite.body.velocity.x = xMultiplier * this._velocity;
        this._sprite.body.velocity.y = yMultiplier * this._velocity;
        this._isLaunched = true;
    }
    toggle() {
        if (this._isLaunched) {
            this.reset(this._goLeft);
            return false;
        }
        else {
            this.launch();
            return true;
        }
    }
    get sprite() {
        return this._sprite;
    }
}
exports.default = Ball;
},{"../Randomizer":2}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Score_1 = require("./Score");
class Computer {
    constructor(state, paddle, ball, maxVelocity = 250, score = new Score_1.default(state)) {
        this._state = state;
        this._paddle = paddle;
        this._ball = ball;
        this._maxVelocity = maxVelocity;
        this._score = score;
    }
    create() {
        this._paddle.create(this._state.game.world.width - 8, this._state.game.world.centerY);
        this._score.create(this._state.game.world.width - 128, 128);
    }
    update() {
        this._paddle.sprite.body.velocity.setTo(this._ball.sprite.body.velocity.y);
        this._paddle.sprite.body.velocity.x = 0;
        this._paddle.sprite.body.maxVelocity.y = this._maxVelocity;
    }
    get paddle() {
        return this._paddle;
    }
    get score() {
        return this._score;
    }
}
exports.default = Computer;
},{"./Score":8}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Score_1 = require("./Score");
class Human {
    constructor(state, paddle, score = new Score_1.default(state)) {
        this._state = state;
        this._paddle = paddle;
        this._score = score;
    }
    create() {
        this._paddle.create(0, this._state.game.world.centerY);
        this._score.create(128, 128);
    }
    update() {
        this._paddle.move(this._state.game.input.y);
    }
    get paddle() {
        return this._paddle;
    }
    get score() {
        return this._score;
    }
}
exports.default = Human;
},{"./Score":8}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Music {
    constructor(state) {
        this._state = state;
    }
    create() {
        this._sound = this._state.game.add.audio('music');
    }
    toggle(play) {
        if (play) {
            if (this._sound.paused) {
                this._sound.resume();
            }
            else {
                this._sound.play();
            }
            return true;
        }
        else {
            this._sound.pause();
            return false;
        }
    }
    pause() {
        this._sound.pause();
    }
}
exports.default = Music;
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Paddle {
    constructor(state) {
        this._state = state;
    }
    create(x, y) {
        this._sprite = this._state.game.add.sprite(x, y, 'paddle');
        this._sprite.anchor.setTo(0.5, 0.5);
        this._state.game.physics.arcade.enable(this._sprite);
        this._sprite.body.collideWorldBounds = true;
        this._sprite.body.immovable = true;
        this._sprite.scale.setTo(0.5, 0.5);
        this._minY = 0.5 * this._sprite.height;
        this._maxY = this._state.game.world.height - 0.5 * this._sprite.height;
    }
    move(y) {
        this._sprite.y = y;
        if (this._sprite.y < this._minY) {
            this._sprite.y = this._minY;
        }
        else if (this._sprite.y > this._maxY) {
            this._sprite.y = this._maxY;
        }
    }
    get sprite() {
        return this._sprite;
    }
}
exports.default = Paddle;
},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Score {
    constructor(state) {
        this._state = state;
        this._value = 0;
    }
    create(x, y) {
        this._bitmap = this._state.game.add.bitmapText(Math.floor(x), Math.floor(y), 'Press Start 2P', '0', 32);
    }
    increase() {
        this._value += 1;
        this._bitmap.text = '' + this._value;
    }
}
exports.default = Score;
},{}],9:[function(require,module,exports){
"use strict";
/// <reference path="../typings/index.d.ts"/>
Object.defineProperty(exports, "__esModule", { value: true });
const PongGame_1 = require("./PongGame");
new PongGame_1.default().start();
},{"./PongGame":1}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BootState extends Phaser.State {
    constructor() {
        super();
    }
    init() {
        // scale to fit screen
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;
        this.scale.forceLandscape = true;
        this.game.scale.windowConstraints.bottom = 'visual'; // make sure it doesn't go over screen height
        this.game.scale.refresh();
        // keep pixels sharp
        this.game.antialias = false;
        this.game.stage.smoothed = false;
        Phaser.Canvas.setImageRenderingCrisp(this.game.canvas);
    }
    update() {
        this.game.state.start('preloader');
    }
}
exports.default = BootState;
},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Human_1 = require("../entities/Human");
const Computer_1 = require("../entities/Computer");
const Ball_1 = require("../entities/Ball");
const Paddle_1 = require("../entities/Paddle");
const Music_1 = require("../entities/Music");
class GameState extends Phaser.State {
    constructor() {
        super();
        this._ball = new Ball_1.default(this);
        this._players = [
            new Human_1.default(this, new Paddle_1.default(this)),
            new Computer_1.default(this, new Paddle_1.default(this), this._ball)
        ];
        this._music = new Music_1.default(this);
    }
    create() {
        this._music.create();
        this._ball.create();
        this._players.forEach(player => player.create());
        this.game.input.onDown.add(() => {
            this._music.toggle(this._ball.toggle());
        }, this);
    }
    update() {
        this._players.forEach(player => {
            player.update();
            this.game.physics.arcade.collide(player.paddle.sprite, this._ball.sprite, () => this.game.sound.play('hit'));
        });
        if (this._ball.sprite.body.blocked.up || this._ball.sprite.body.blocked.down) {
            this.game.sound.play('wall');
        }
        if (this._ball.sprite.body.blocked.left) {
            this.score(this._players[1], false);
        }
        if (this._ball.sprite.body.blocked.right) {
            this.score(this._players[0], true);
        }
    }
    score(player, goLeft) {
        player.score.increase();
        this.game.sound.play('score');
        this._ball.reset(goLeft);
        this._music.pause();
    }
}
exports.default = GameState;
},{"../entities/Ball":3,"../entities/Computer":4,"../entities/Human":5,"../entities/Music":6,"../entities/Paddle":7}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class PreloaderState extends Phaser.State {
    constructor() {
        super();
    }
    preload() {
        this.game.load.image('paddle', 'images/paddle.png');
        this.game.load.image('ball', 'images/ball.png');
        this.game.load.bitmapFont('Press Start 2P', 'fonts/Press_Start_2P_0.png', 'fonts/Press_Start_2P.fnt');
        this.game.load.audio('hit', ['audio/hit.wav']);
        this.game.load.audio('score', ['audio/score.wav']);
        this.game.load.audio('wall', ['audio/wall.wav']);
        this.game.load.audio('music', ['audio/at-night-psg.mp3', 'audio/at-night-psg.ogg']);
    }
    update() {
        this.game.state.start('game');
    }
}
exports.default = PreloaderState;
},{}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
